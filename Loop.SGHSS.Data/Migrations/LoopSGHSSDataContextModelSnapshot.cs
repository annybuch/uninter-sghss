// <auto-generated />
using System;
using Loop.SGHSS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Loop.SGHSS.Data.Migrations
{
    [DbContext(typeof(LoopSGHSSDataContext))]
    partial class LoopSGHSSDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Loop.SGHSS.Data.Entities.Suprimento_Entity.Suprimento_Compra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Codigo")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DataComprada")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("InstituicaoId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Marca")
                        .HasColumnType("longtext");

                    b.Property<int?>("QuantidadeComprada")
                        .HasColumnType("int");

                    b.Property<int?>("QuantidadeSaida")
                        .HasColumnType("int");

                    b.Property<Guid?>("SuprimentoId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.Property<decimal?>("ValorPago")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("InstituicaoId");

                    b.HasIndex("SuprimentoId");

                    b.ToTable("SuprimentosCompras");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Adm_Entity.Administrador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bairro")
                        .HasColumnType("longtext");

                    b.Property<string>("CEP")
                        .HasColumnType("longtext");

                    b.Property<string>("CPF")
                        .HasColumnType("longtext");

                    b.Property<int?>("CargoAdm")
                        .HasColumnType("int");

                    b.Property<string>("Cidade")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Foto")
                        .HasColumnType("longtext");

                    b.Property<int?>("Genero")
                        .HasColumnType("int");

                    b.Property<Guid?>("InstituicaoId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("Logradouro")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<string>("Numero")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Administrador");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Agenda_Entiity.Instituicao_Agenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("DiaSemana")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("HoraFim")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time(6)");

                    b.Property<Guid?>("InstituicaoId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("InstituicaoId");

                    b.ToTable("InstituicaoAgenda");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Agenda_Entiity.ProfissionalSaude_Agenda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("DiaSemana")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("HoraFim")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan?>("HoraFimAlmoco")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan?>("HoraInicioAlmoco")
                        .HasColumnType("time(6)");

                    b.Property<Guid?>("InstituicaoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProfissionalSaudeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.Property<int>("TipoConsulta")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstituicaoId");

                    b.HasIndex("ProfissionalSaudeId");

                    b.ToTable("ProfissionalSaudeAgenda");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Consulta_Entity.Consulta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Anotacoes")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataMarcada")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("EspecializacaoId")
                        .HasColumnType("char(36)");

                    b.Property<int>("FormaDePagamento")
                        .HasColumnType("int");

                    b.Property<byte[]>("GuiaMedico")
                        .HasColumnType("longblob");

                    b.Property<Guid?>("InstituicaoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("InstituicaoId1")
                        .HasColumnType("char(36)");

                    b.Property<bool?>("Notificacao24horas")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Notificacao2horas")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("PacienteId")
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Prescricao")
                        .HasColumnType("longblob");

                    b.Property<Guid>("ProfissionalSaudeId")
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Receita")
                        .HasColumnType("longblob");

                    b.Property<int>("StatusConsulta")
                        .HasColumnType("int");

                    b.Property<int>("StatusPagamento")
                        .HasColumnType("int");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.Property<int>("TipoConsulta")
                        .HasColumnType("int");

                    b.Property<string>("UrlSalaVideo")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("EspecializacaoId");

                    b.HasIndex("InstituicaoId");

                    b.HasIndex("InstituicaoId1");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ProfissionalSaudeId");

                    b.ToTable("Consultas");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Exame_Entity.Exame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Anotacoes")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataMarcada")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FormaDePagamento")
                        .HasColumnType("int");

                    b.Property<byte[]>("GuiaMedico")
                        .HasColumnType("longblob");

                    b.Property<Guid?>("InstituicaoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PacienteId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProfissionalSaudeId")
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Resultado")
                        .HasColumnType("longblob");

                    b.Property<int>("StatusExame")
                        .HasColumnType("int");

                    b.Property<int>("StatusPagamento")
                        .HasColumnType("int");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid?>("servicoLaboratorioId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("InstituicaoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ProfissionalSaudeId");

                    b.HasIndex("servicoLaboratorioId");

                    b.ToTable("Exames");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Funcionario_Entity.Funcionario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bairro")
                        .HasColumnType("longtext");

                    b.Property<string>("CEP")
                        .HasColumnType("longtext");

                    b.Property<string>("CPF")
                        .HasColumnType("longtext");

                    b.Property<int?>("CargoFuncionario")
                        .HasColumnType("int");

                    b.Property<string>("Cidade")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Foto")
                        .HasColumnType("longtext");

                    b.Property<int?>("Genero")
                        .HasColumnType("int");

                    b.Property<Guid?>("InstituicaoId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("Logradouro")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<string>("Numero")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("InstituicaoId");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bairro")
                        .HasColumnType("longtext");

                    b.Property<string>("CEP")
                        .HasColumnType("longtext");

                    b.Property<string>("CNPJ")
                        .HasColumnType("longtext");

                    b.Property<string>("Cidade")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<int?>("IntervaloMinutos")
                        .HasColumnType("int");

                    b.Property<int?>("Logradouro")
                        .HasColumnType("int");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("longtext");

                    b.Property<string>("Numero")
                        .HasColumnType("longtext");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext");

                    b.Property<int?>("TipoInstituicao")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Instituicoes");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao_Especializacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("EspecializacaoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("InstituicaoId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EspecializacaoId");

                    b.HasIndex("InstituicaoId");

                    b.ToTable("InstituicoesEspecializacoes");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao_ServicosLaboratorio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("InstituicaoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ServicosLaboratorioId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("InstituicaoId");

                    b.HasIndex("ServicosLaboratorioId");

                    b.ToTable("InstituicoesServicosLaboratorio");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Leito_Entity.Leito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("Andar")
                        .HasColumnType("int");

                    b.Property<Guid?>("InstituicaoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("InstutuicaoId")
                        .HasColumnType("char(36)");

                    b.Property<string>("NumeroLeito")
                        .HasColumnType("longtext");

                    b.Property<string>("Observacao")
                        .HasColumnType("longtext");

                    b.Property<string>("Sala")
                        .HasColumnType("longtext");

                    b.Property<int?>("StatusLeito")
                        .HasColumnType("int");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.Property<int?>("TipoLeito")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("InstituicaoId");

                    b.ToTable("Leitos");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Leito_Entity.LeitoPacienteObservacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("Leito_PacienteLogId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LeitosPacientesId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Leito_PacienteLogId");

                    b.HasIndex("LeitosPacientesId");

                    b.ToTable("LeitoPacienteObservacao");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Leito_Entity.Leito_Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DataEntrada")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LeitoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PacienteId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LeitoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("LeitosPacientes");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Leito_Entity.Leito_PacienteLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DataEntrada")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataSaida")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("IdOriginal")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("LeitoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PacienteId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LeitoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("LeitoPacienteLog");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Patient_Entity.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bairro")
                        .HasColumnType("longtext");

                    b.Property<string>("CEP")
                        .HasColumnType("longtext");

                    b.Property<string>("CPF")
                        .HasColumnType("longtext");

                    b.Property<string>("Cidade")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Foto")
                        .HasColumnType("longtext");

                    b.Property<int?>("Genero")
                        .HasColumnType("int");

                    b.Property<int?>("Logradouro")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<string>("Numero")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.Property<string>("Titulo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Permissoes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f3905f2-c752-4889-8ad9-9cf7c7eab1e1"),
                            Codigo = "A01",
                            Descricao = "Permite visualizar detalhes de todas as instituições no sistema.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Visualizar todas as instituições"
                        },
                        new
                        {
                            Id = new Guid("566c3f4e-4a85-4ef2-8d98-a06e9128d616"),
                            Codigo = "A02",
                            Descricao = "Permite criar novas instituições.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Cadastrar nova instituição"
                        },
                        new
                        {
                            Id = new Guid("9e727c46-d3ed-41f4-8cf3-9115963fa47c"),
                            Codigo = "A03",
                            Descricao = "Permite modificar detalhes de instituições existentes.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Editar instituição"
                        },
                        new
                        {
                            Id = new Guid("244d7fa7-25fa-4004-aa27-acd4e026018d"),
                            Codigo = "A04",
                            Descricao = "Permite a exclusão de instituições (uso restrito).",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Excluir instituição"
                        },
                        new
                        {
                            Id = new Guid("e8e4f82f-7230-4186-9d4a-041bf8b38abe"),
                            Codigo = "A05",
                            Descricao = "Permite gerenciar permissões para qualquer tipo de usuário.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Gerenciar permissões de usuários"
                        },
                        new
                        {
                            Id = new Guid("3dc0c70a-035f-4a00-99dc-9382c0080df0"),
                            Codigo = "A06",
                            Descricao = "Permite visualizar todos os usuários e suas permissões atribuídas.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Visualizar todos os usuários e suas permissões"
                        },
                        new
                        {
                            Id = new Guid("448b9609-4c30-4275-84fa-7594921ccef6"),
                            Codigo = "A07",
                            Descricao = "Permite acessar dashboards e análises de todo o sistema.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Acessar dashboard global (todas as instituições)"
                        },
                        new
                        {
                            Id = new Guid("0a2d493b-d0ae-4e37-8771-b0e9e0ef38f6"),
                            Codigo = "A08",
                            Descricao = "Permite criar, editar e excluir especializações médicas.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Gerenciar especializações"
                        },
                        new
                        {
                            Id = new Guid("f9cd7840-871e-4508-a3b3-a96f3ee4d6ce"),
                            Codigo = "A09",
                            Descricao = "Permite gerenciar (adicionar, editar, excluir) serviços de laboratório oferecidos.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Gerenciar serviços laboratoriais"
                        },
                        new
                        {
                            Id = new Guid("c5ffb0ce-bcd0-4912-a908-d7af75a5a865"),
                            Codigo = "B01",
                            Descricao = "Permite visualizar detalhes da instituição do próprio administrador.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Visualizar dados da própria instituição"
                        },
                        new
                        {
                            Id = new Guid("ad7c3f83-b2e3-4a17-b68d-8e2ae55a7655"),
                            Codigo = "B02",
                            Descricao = "Permite registrar novos funcionários na instituição.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Cadastrar funcionário"
                        },
                        new
                        {
                            Id = new Guid("5b2f9c7c-e70c-4381-a90e-6f7ede9fcc81"),
                            Codigo = "B03",
                            Descricao = "Permite modificar ou excluir registros de funcionários.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Editar/Excluir funcionário"
                        },
                        new
                        {
                            Id = new Guid("8b2ba859-e8ed-4b0c-bc5e-c84ddb8d3b4e"),
                            Codigo = "B04",
                            Descricao = "Permite registrar novos profissionais de saúde para a instituição.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Cadastrar profissional de saúde"
                        },
                        new
                        {
                            Id = new Guid("465664b9-608b-4920-b9df-2d41fcad2bf6"),
                            Codigo = "B05",
                            Descricao = "Permite modificar registros de profissionais de saúde.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Editar profissional de saúde"
                        },
                        new
                        {
                            Id = new Guid("b4611b48-939e-4b5f-843c-3846c979ba9f"),
                            Codigo = "B06",
                            Descricao = "Permite vincular profissionais a especializações ou instituições específicas.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Associar profissionais a especializações/instituições"
                        },
                        new
                        {
                            Id = new Guid("b7b5e90a-4a9e-4dcd-8200-125c564d8f13"),
                            Codigo = "B07",
                            Descricao = "Permite o gerenciamento completo dos suprimentos da instituição.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Gerenciar suprimentos da instituição"
                        },
                        new
                        {
                            Id = new Guid("8b375021-91d7-4ba6-bee2-df20467e435d"),
                            Codigo = "B08",
                            Descricao = "Permite acessar dashboards relevantes para a instituição específica.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Visualizar dashboard institucional"
                        },
                        new
                        {
                            Id = new Guid("5a02cd5c-f09e-4942-b580-1585e0a39381"),
                            Codigo = "B09",
                            Descricao = "Permite gerenciar (registrar, editar, liberar) leitos hospitalares na instituição.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Gerenciar leitos (cadastrar, editar, liberar)"
                        },
                        new
                        {
                            Id = new Guid("805c3ae1-df4e-4e0b-9edb-45b9dda392b4"),
                            Codigo = "B10",
                            Descricao = "Permite visualizar a agenda de agendamentos completa da instituição.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Visualizar agenda da instituição"
                        },
                        new
                        {
                            Id = new Guid("b68a0499-dc85-4fc9-8d7d-b1c40ccaf079"),
                            Codigo = "C01",
                            Descricao = "Permite ao profissional visualizar sua própria agenda de agendamentos.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Visualizar agenda pessoal"
                        },
                        new
                        {
                            Id = new Guid("164092f9-7031-4c1e-821c-762441c2e1bc"),
                            Codigo = "C02",
                            Descricao = "Permite realizar consultas presenciais.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Atender consulta presencial"
                        },
                        new
                        {
                            Id = new Guid("a994973d-20e9-4358-9cf9-2a8d022572fd"),
                            Codigo = "C03",
                            Descricao = "Permite realizar teleconsultas.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Atender teleconsulta"
                        },
                        new
                        {
                            Id = new Guid("a54628f4-a99d-4aa8-8a52-36b59cbc9a0a"),
                            Codigo = "C04",
                            Descricao = "Permite adicionar novas entradas no prontuário médico do paciente.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Inserir prontuário"
                        },
                        new
                        {
                            Id = new Guid("9cd9c283-37e0-4e45-a485-687eb338b32d"),
                            Codigo = "C05",
                            Descricao = "Permite emitir prescrições médicas.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Emitir prescrição"
                        },
                        new
                        {
                            Id = new Guid("203f2184-0c76-454d-8072-825203621475"),
                            Codigo = "C06",
                            Descricao = "Permite solicitar exames laboratoriais ou outros procedimentos.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Solicitar exame"
                        },
                        new
                        {
                            Id = new Guid("860e8e66-7b42-4f17-b991-0e4ac9667da7"),
                            Codigo = "C07",
                            Descricao = "Permite visualizar o histórico médico de pacientes atendidos pelo profissional.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Visualizar histórico de pacientes atendidos"
                        },
                        new
                        {
                            Id = new Guid("8c176c7f-c208-400a-b4ea-39fdb9540b82"),
                            Codigo = "C08",
                            Descricao = "Permite anexar arquivos PDF a registros de pacientes ou outras seções relevantes.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Anexar arquivos PDF"
                        },
                        new
                        {
                            Id = new Guid("0a125da8-1110-41d5-a48e-eb2a9830ccf7"),
                            Codigo = "C09",
                            Descricao = "Permite ao profissional gerenciar sua própria disponibilidade e horários de atendimento.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Gerenciar dias e horários de atendimento"
                        },
                        new
                        {
                            Id = new Guid("82b40e9c-d00f-4fc4-b0cf-6b6b468b2f18"),
                            Codigo = "D01",
                            Descricao = "Permite agendar consultas para pacientes.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Agendar consulta para paciente"
                        },
                        new
                        {
                            Id = new Guid("33adc69b-87c5-4939-861f-1dc9c9fee789"),
                            Codigo = "D02",
                            Descricao = "Permite agendar exames para pacientes.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Agendar exame para paciente"
                        },
                        new
                        {
                            Id = new Guid("c33313ce-0bbc-49c5-8387-d7cec7ccbf5b"),
                            Codigo = "D03",
                            Descricao = "Permite visualizar a agenda de agendamentos completa da instituição.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Visualizar agenda da instituição"
                        },
                        new
                        {
                            Id = new Guid("6549472f-ed67-4ecb-a7fe-2d9095cd2ac8"),
                            Codigo = "D04",
                            Descricao = "Permite visualizar o histórico geral de pacientes (informações básicas).",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Visualizar histórico de pacientes"
                        },
                        new
                        {
                            Id = new Guid("59eb9ffd-8c72-49da-b85d-567ad6fc7a63"),
                            Codigo = "D05",
                            Descricao = "Permite registrar novos pacientes.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Cadastrar paciente"
                        },
                        new
                        {
                            Id = new Guid("4180ef67-0bca-4516-8a8f-ac9e4f1cb72a"),
                            Codigo = "D06",
                            Descricao = "Permite editar informações demográficas básicas de um paciente.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Editar dados do paciente"
                        },
                        new
                        {
                            Id = new Guid("fd948e86-9220-4202-99a4-bcf37974df13"),
                            Codigo = "D07",
                            Descricao = "Permite gerenciar compras e registrar o consumo de suprimentos.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Gerenciar suprimentos (cadastro de compra, consumo)"
                        },
                        new
                        {
                            Id = new Guid("d3e4c6c8-70f1-4a24-8da8-8cfbf3efb70d"),
                            Codigo = "D08",
                            Descricao = "Permite acessar dashboards relevantes para a instituição.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Visualizar dashboards da instituição"
                        },
                        new
                        {
                            Id = new Guid("79fe4c03-fa6b-4551-bb7b-e6cd3f676612"),
                            Codigo = "D09",
                            Descricao = "Permite atribuir pacientes a leitos e gerenciar a ocupação de leitos.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Gerenciar leitos (cadastrar, associar paciente)"
                        },
                        new
                        {
                            Id = new Guid("5dedb2a0-00f1-40c1-9ca0-ba9d7f578f03"),
                            Codigo = "E01",
                            Descricao = "Permite ao paciente agendar suas próprias consultas.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Agendar consulta"
                        },
                        new
                        {
                            Id = new Guid("0c4b4bd8-70ed-4103-a97a-f402e9cbd396"),
                            Codigo = "E02",
                            Descricao = "Permite ao paciente cancelar suas próprias consultas agendadas.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Cancelar consulta"
                        },
                        new
                        {
                            Id = new Guid("4b145763-a908-4075-b3fc-3e69af86f874"),
                            Codigo = "E03",
                            Descricao = "Permite ao paciente agendar seus próprios exames.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Agendar exame"
                        },
                        new
                        {
                            Id = new Guid("aab4f2d2-2a09-41f9-8c51-0ce7879ce007"),
                            Codigo = "E04",
                            Descricao = "Permite ao paciente cancelar seus próprios exames agendados.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Cancelar exame"
                        },
                        new
                        {
                            Id = new Guid("37dd6ec0-9f78-429a-8e88-ab0eb27f9c70"),
                            Codigo = "E05",
                            Descricao = "Permite visualizar o histórico de agendamentos de consultas e exames.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Visualizar histórico de agendamentos"
                        },
                        new
                        {
                            Id = new Guid("f7236c11-e963-49b5-b457-9202385e7cc8"),
                            Codigo = "E06",
                            Descricao = "Permite ao paciente acessar teleconsultas agendadas.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Acessar teleconsulta"
                        },
                        new
                        {
                            Id = new Guid("422ee0be-2675-4383-bd3f-ac8f1f0b7d7c"),
                            Codigo = "E07",
                            Descricao = "Permite ao paciente receber notificações do sistema por e-mail.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Receber notificações por e-mail"
                        },
                        new
                        {
                            Id = new Guid("2c033328-2a48-4214-885c-297c766f3009"),
                            Codigo = "E08",
                            Descricao = "Permite ao paciente visualizar e baixar suas próprias prescrições e resultados de exames.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Visualizar e baixar prescrições e exames"
                        },
                        new
                        {
                            Id = new Guid("e91e6715-6e9f-41b3-98c3-5694a3b47c16"),
                            Codigo = "USUARIO_MUDAR_SENHA_PROPRIA",
                            Descricao = "Permite ao usuário alterar a sua própria senha de acesso.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Mudar Minha Senha"
                        },
                        new
                        {
                            Id = new Guid("f5de3541-d0f2-406b-a8c2-c6552b9d8121"),
                            Codigo = "USUARIO_RESETAR_SENHA_TERCEIRO",
                            Descricao = "Permite a redefinição de senha para outros usuários (Funcionários, Profissionais, Pacientes, etc.).",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Resetar Senha de Outro Usuário"
                        },
                        new
                        {
                            Id = new Guid("8a015a50-04b4-4fcb-b29a-da37da226811"),
                            Codigo = "USUARIO_EDITAR_PERFIL_PROPRIO",
                            Descricao = "Permite ao usuário editar suas próprias informações de perfil (nome, telefone, etc.).",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Editar Meu Perfil"
                        },
                        new
                        {
                            Id = new Guid("f8b5febc-d326-4c2e-9573-a6edb0eee675"),
                            Codigo = "USUARIO_VISUALIZAR_PERFIL_PROPRIO",
                            Descricao = "Permite ao usuário visualizar suas próprias informações de perfil.",
                            SysDInsert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysDUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SysIsDeleted = false,
                            SysUserInsert = new Guid("00000000-0000-0000-0000-000000000000"),
                            SysUserUpdate = new Guid("00000000-0000-0000-0000-000000000000"),
                            Titulo = "Visualizar Meu Perfil"
                        });
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao_Administrador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AdministradorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PermissaoId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AdministradorId");

                    b.HasIndex("PermissaoId")
                        .IsUnique();

                    b.ToTable("PermissoesAdministrador");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao_Funcionario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("FuncionarioId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PermissaoId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("PermissaoId")
                        .IsUnique();

                    b.ToTable("PermissoesFuncionarios");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao_Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PacienteId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PermissaoId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.HasIndex("PermissaoId")
                        .IsUnique();

                    b.ToTable("PermissoesPaciente");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao_ProfissionalSaude", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PermissaoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProfissionalSaudeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PermissaoId")
                        .IsUnique();

                    b.HasIndex("ProfissionalSaudeId");

                    b.ToTable("PermissoesProfissionaisSaude");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.ProfessionalSaude_Entity.ProfissionalSaude", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bairro")
                        .HasColumnType("longtext");

                    b.Property<string>("CEP")
                        .HasColumnType("longtext");

                    b.Property<string>("CPF")
                        .HasColumnType("longtext");

                    b.Property<int?>("CargoProfissionalSaude")
                        .HasColumnType("int");

                    b.Property<string>("Cidade")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Foto")
                        .HasColumnType("longtext");

                    b.Property<int?>("Genero")
                        .HasColumnType("int");

                    b.Property<int?>("Logradouro")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<string>("Numero")
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroRegistro")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ProfissionaisSaude");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Profissional_Saude_Entity.ProfissionalSaude_Especializacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("EspecializacaoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("EspecializacoesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProfissionalSaudeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EspecializacoesId");

                    b.HasIndex("ProfissionalSaudeId");

                    b.ToTable("ProfissionaisSaudeEspecializacao");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Profissional_Saude_Entity.ProfissionalSaude_Instituicao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("InstituicaoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProfissionalSaudeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("InstituicaoId");

                    b.HasIndex("ProfissionalSaudeId");

                    b.ToTable("ProfissionaisSaudeInstituicoes");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Profissional_Saude_Entity.ProfissionalSaude_ServicoLaboratorio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProfissionalSaudeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ServicosLaboratorioId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProfissionalSaudeId");

                    b.HasIndex("ServicosLaboratorioId");

                    b.ToTable("ProfissionaisSaudeServicosLaboratorio");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Servicos_Entity.Especializacoes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.Property<string>("Titulo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Especializacoes");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Servicos_Entity.ServicosLaboratorio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<string>("Recomendacao")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.Property<string>("Titulo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ServicosLaboratorios");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Suprimento_Entity.CategoriaSuprimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.Property<string>("Titulo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CategoriasSuprimentos");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Suprimento_Entity.Suprimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CategoriaId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("InstituicaoId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SysDInsert")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SysDUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SysIsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("SysUserInsert")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SysUserUpdate")
                        .HasColumnType("char(36)");

                    b.Property<string>("Titulo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("InstituicaoId");

                    b.ToTable("Suprimentos");
                });

            modelBuilder.Entity("Loop.SGHSS.Data.Entities.Suprimento_Entity.Suprimento_Compra", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao", "Instituicao")
                        .WithMany("SuprimentosCompra")
                        .HasForeignKey("InstituicaoId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.Suprimento_Entity.Suprimento", "Suprimento")
                        .WithMany("SuprimentosCompras")
                        .HasForeignKey("SuprimentoId");

                    b.Navigation("Instituicao");

                    b.Navigation("Suprimento");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Agenda_Entiity.Instituicao_Agenda", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao", "Instituicao")
                        .WithMany("InstituicaoAgenda")
                        .HasForeignKey("InstituicaoId");

                    b.Navigation("Instituicao");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Agenda_Entiity.ProfissionalSaude_Agenda", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao", "Instituicao")
                        .WithMany()
                        .HasForeignKey("InstituicaoId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.ProfessionalSaude_Entity.ProfissionalSaude", "ProfissionalSaude")
                        .WithMany("ProfissionalSaudeAgenda")
                        .HasForeignKey("ProfissionalSaudeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instituicao");

                    b.Navigation("ProfissionalSaude");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Consulta_Entity.Consulta", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Servicos_Entity.Especializacoes", "Especializacao")
                        .WithMany("Consultas")
                        .HasForeignKey("EspecializacaoId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao", "Instituicao")
                        .WithMany()
                        .HasForeignKey("InstituicaoId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao", null)
                        .WithMany("Consultas")
                        .HasForeignKey("InstituicaoId1");

                    b.HasOne("Loop.SGHSS.Domain.Entities.Patient_Entity.Paciente", "Paciente")
                        .WithMany("Consultas")
                        .HasForeignKey("PacienteId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.ProfessionalSaude_Entity.ProfissionalSaude", "ProfissionalSaude")
                        .WithMany("Consultas")
                        .HasForeignKey("ProfissionalSaudeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especializacao");

                    b.Navigation("Instituicao");

                    b.Navigation("Paciente");

                    b.Navigation("ProfissionalSaude");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Exame_Entity.Exame", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao", "Instituicao")
                        .WithMany("Exames")
                        .HasForeignKey("InstituicaoId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.Patient_Entity.Paciente", "Paciente")
                        .WithMany("Exames")
                        .HasForeignKey("PacienteId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.ProfessionalSaude_Entity.ProfissionalSaude", "ProfissionalSaude")
                        .WithMany("Exames")
                        .HasForeignKey("ProfissionalSaudeId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.Servicos_Entity.ServicosLaboratorio", "servicoLaboratorio")
                        .WithMany("Exames")
                        .HasForeignKey("servicoLaboratorioId");

                    b.Navigation("Instituicao");

                    b.Navigation("Paciente");

                    b.Navigation("ProfissionalSaude");

                    b.Navigation("servicoLaboratorio");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Funcionario_Entity.Funcionario", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao", "Instituicao")
                        .WithMany("Funcionarios")
                        .HasForeignKey("InstituicaoId");

                    b.Navigation("Instituicao");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao_Especializacao", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Servicos_Entity.Especializacoes", "Especializacao")
                        .WithMany("InstituicaoEspecializacao")
                        .HasForeignKey("EspecializacaoId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao", "Instituicao")
                        .WithMany("InstituicaoEspecializacoes")
                        .HasForeignKey("InstituicaoId");

                    b.Navigation("Especializacao");

                    b.Navigation("Instituicao");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao_ServicosLaboratorio", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao", "Instituicao")
                        .WithMany("InstituicaoServicosLaboratorio")
                        .HasForeignKey("InstituicaoId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.Servicos_Entity.ServicosLaboratorio", "ServicosLaboratorio")
                        .WithMany("InstituicaoServicosLaboratorio")
                        .HasForeignKey("ServicosLaboratorioId");

                    b.Navigation("Instituicao");

                    b.Navigation("ServicosLaboratorio");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Leito_Entity.Leito", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao", "Instituicao")
                        .WithMany("Leitos")
                        .HasForeignKey("InstituicaoId");

                    b.Navigation("Instituicao");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Leito_Entity.LeitoPacienteObservacao", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Leito_Entity.Leito_PacienteLog", null)
                        .WithMany("Observacoes")
                        .HasForeignKey("Leito_PacienteLogId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.Leito_Entity.Leito_Paciente", "LeitosPacientes")
                        .WithMany("Observacoes")
                        .HasForeignKey("LeitosPacientesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeitosPacientes");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Leito_Entity.Leito_Paciente", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Leito_Entity.Leito", "Leito")
                        .WithMany()
                        .HasForeignKey("LeitoId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.Patient_Entity.Paciente", "Paciente")
                        .WithMany("LeitoPaciente")
                        .HasForeignKey("PacienteId");

                    b.Navigation("Leito");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Leito_Entity.Leito_PacienteLog", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Leito_Entity.Leito", "Leito")
                        .WithMany()
                        .HasForeignKey("LeitoId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.Patient_Entity.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId");

                    b.Navigation("Leito");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao_Administrador", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Adm_Entity.Administrador", "Administrador")
                        .WithMany("PermissoesAdministrador")
                        .HasForeignKey("AdministradorId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao", "Permissao")
                        .WithOne("PermissoesAdministrador")
                        .HasForeignKey("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao_Administrador", "PermissaoId");

                    b.Navigation("Administrador");

                    b.Navigation("Permissao");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao_Funcionario", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Funcionario_Entity.Funcionario", "Funcionario")
                        .WithMany("PermissoesFuncionario")
                        .HasForeignKey("FuncionarioId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao", "Permissao")
                        .WithOne("PermissoesFuncionario")
                        .HasForeignKey("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao_Funcionario", "PermissaoId");

                    b.Navigation("Funcionario");

                    b.Navigation("Permissao");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao_Paciente", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Patient_Entity.Paciente", "Paciente")
                        .WithMany("PermissoesPaciente")
                        .HasForeignKey("PacienteId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao", "Permissao")
                        .WithOne("PermissoesPaciente")
                        .HasForeignKey("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao_Paciente", "PermissaoId");

                    b.Navigation("Paciente");

                    b.Navigation("Permissao");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao_ProfissionalSaude", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao", "Permissao")
                        .WithOne("PermissoesProfissionalSaude")
                        .HasForeignKey("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao_ProfissionalSaude", "PermissaoId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.ProfessionalSaude_Entity.ProfissionalSaude", "ProfissionalSaude")
                        .WithMany("PermissoesProfissionalSaude")
                        .HasForeignKey("ProfissionalSaudeId");

                    b.Navigation("Permissao");

                    b.Navigation("ProfissionalSaude");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Profissional_Saude_Entity.ProfissionalSaude_Especializacao", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Servicos_Entity.Especializacoes", "Especializacoes")
                        .WithMany("ProfissionalSaudeEspecializacao")
                        .HasForeignKey("EspecializacoesId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.ProfessionalSaude_Entity.ProfissionalSaude", "ProfissionalSaude")
                        .WithMany("ProfissionalSaudeEspecializacoes")
                        .HasForeignKey("ProfissionalSaudeId");

                    b.Navigation("Especializacoes");

                    b.Navigation("ProfissionalSaude");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Profissional_Saude_Entity.ProfissionalSaude_Instituicao", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao", "Instituicao")
                        .WithMany("ProfissionaisSaudeInstituicao")
                        .HasForeignKey("InstituicaoId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.ProfessionalSaude_Entity.ProfissionalSaude", "ProfissionalSaude")
                        .WithMany("ProfissionalSaudeInstituicoes")
                        .HasForeignKey("ProfissionalSaudeId");

                    b.Navigation("Instituicao");

                    b.Navigation("ProfissionalSaude");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Profissional_Saude_Entity.ProfissionalSaude_ServicoLaboratorio", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.ProfessionalSaude_Entity.ProfissionalSaude", "ProfissionalSaude")
                        .WithMany("ProfissionalSaudeServicosLaboratorio")
                        .HasForeignKey("ProfissionalSaudeId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.Servicos_Entity.ServicosLaboratorio", "ServicosLaboratorio")
                        .WithMany("ProfissionalSaudeServicoLaboratorio")
                        .HasForeignKey("ServicosLaboratorioId");

                    b.Navigation("ProfissionalSaude");

                    b.Navigation("ServicosLaboratorio");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Suprimento_Entity.Suprimento", b =>
                {
                    b.HasOne("Loop.SGHSS.Domain.Entities.Suprimento_Entity.CategoriaSuprimento", "Categoria")
                        .WithMany("Suprimentos")
                        .HasForeignKey("CategoriaId");

                    b.HasOne("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao", "Instituicao")
                        .WithMany()
                        .HasForeignKey("InstituicaoId");

                    b.Navigation("Categoria");

                    b.Navigation("Instituicao");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Adm_Entity.Administrador", b =>
                {
                    b.Navigation("PermissoesAdministrador");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Funcionario_Entity.Funcionario", b =>
                {
                    b.Navigation("PermissoesFuncionario");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Instituicao_Entity.Instituicao", b =>
                {
                    b.Navigation("Consultas");

                    b.Navigation("Exames");

                    b.Navigation("Funcionarios");

                    b.Navigation("InstituicaoAgenda");

                    b.Navigation("InstituicaoEspecializacoes");

                    b.Navigation("InstituicaoServicosLaboratorio");

                    b.Navigation("Leitos");

                    b.Navigation("ProfissionaisSaudeInstituicao");

                    b.Navigation("SuprimentosCompra");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Leito_Entity.Leito_Paciente", b =>
                {
                    b.Navigation("Observacoes");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Leito_Entity.Leito_PacienteLog", b =>
                {
                    b.Navigation("Observacoes");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Patient_Entity.Paciente", b =>
                {
                    b.Navigation("Consultas");

                    b.Navigation("Exames");

                    b.Navigation("LeitoPaciente");

                    b.Navigation("PermissoesPaciente");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Permissao_Entity.Permissao", b =>
                {
                    b.Navigation("PermissoesAdministrador");

                    b.Navigation("PermissoesFuncionario");

                    b.Navigation("PermissoesPaciente");

                    b.Navigation("PermissoesProfissionalSaude");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.ProfessionalSaude_Entity.ProfissionalSaude", b =>
                {
                    b.Navigation("Consultas");

                    b.Navigation("Exames");

                    b.Navigation("PermissoesProfissionalSaude");

                    b.Navigation("ProfissionalSaudeAgenda");

                    b.Navigation("ProfissionalSaudeEspecializacoes");

                    b.Navigation("ProfissionalSaudeInstituicoes");

                    b.Navigation("ProfissionalSaudeServicosLaboratorio");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Servicos_Entity.Especializacoes", b =>
                {
                    b.Navigation("Consultas");

                    b.Navigation("InstituicaoEspecializacao");

                    b.Navigation("ProfissionalSaudeEspecializacao");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Servicos_Entity.ServicosLaboratorio", b =>
                {
                    b.Navigation("Exames");

                    b.Navigation("InstituicaoServicosLaboratorio");

                    b.Navigation("ProfissionalSaudeServicoLaboratorio");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Suprimento_Entity.CategoriaSuprimento", b =>
                {
                    b.Navigation("Suprimentos");
                });

            modelBuilder.Entity("Loop.SGHSS.Domain.Entities.Suprimento_Entity.Suprimento", b =>
                {
                    b.Navigation("SuprimentosCompras");
                });
#pragma warning restore 612, 618
        }
    }
}
